/* What are Pseudo-classes?
Pseudo-classes are keywords that are added to selectors
to style elements based on their state or position in the 
document, such as :hover, :active, :first-child, etc. */
/* Styles a link when hovered over */
a:hover {
  color: red;
}

/* Styles the first paragraph in a container */
.container p:first-child {
  font-weight: bold;
}

/* What are Pseudo-elements? */

/* Pseudo-elements allow you to style specific parts of an element,
 such as the first letter, first line, or adding content before or
  after an element, without modifying the HTML structure. */

/* Common Pseudo-elements:

::before: Inserts content before the content of an element.
::after: Inserts content after the content of an element.
::first-line: Styles the first line of text within an element.
::first-letter: Styles the first letter of text within an element.
::selection: Styles the portion of text that is selected by the user. */

/* Adds an arrow before every <li> element */
a::before {
  content: "â†’";
}

/* Styles the first letter of every paragraph */
p::first-letter {
  font-size: larger;
  color: purple;
}

/* Animations use of keyframes */
@keyframes slide {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100px);
  }
}

.slide-in {
  animation-name: slide;
  animation-duration: 1s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
}

.box {
  width: 100px;
  height: 100px;
  background-color: coral;
  margin: 20px;
  transition: transform 0.5s;
}
/* transformations */
.translate {
  transform: translate(50px, 100px);
}
.rotate {
  transform: rotate(45deg);
}
.scale {
  transform: scale(1.5);
}
.skew {
  transform: skew(30deg, 20deg);
}
.combined {
  transform: translate(50px, 100px) rotate(45deg) scale(1.5);
}
/* Elements with display: inline are laid out in a line, like text.
 They do not start on a new line and only take up as much width as necessary. */
/* Margin and padding are applied but do not affect the position of other elements; 
 only horizontal margins and paddings affect the spacing. */
/* Width and height properties have no effect.
<span>, <a>, <strong>, <em> */
.inline {
  display: inline;
  margin: 10px;
  padding: 10px;
  background-color: lightblue;
}
/* Elements with display: block start on a new line and take up the full width available
 (100% of the parent element's width) by default.
Margin, padding, width, and height properties are respected.
Other block-level elements will also start on a new line after them.
<div>, <p>, <h1> to <h6>, <section>, <article> */
.block {
  display: block;
  margin: 10px;
  padding: 10px;
  width: 100px;
  height: 50px;
  background-color: lightgreen;
}
/* Elements with display: inline-block are laid out in a line, like inline elements,
 but they respect width and height properties.
Margin and padding affect the surrounding elements like block elements.
Inline-block elements do not start on a new line, but you can control 
their size with width and height properties. */
.inline-block {
  display: inline-block;
  margin: 10px;
  padding: 10px;
  width: 100px;
  height: 50px;
  background-color: lightcoral;
}

.box2 {
  width: 100px;
  height: 100px;
  margin: 10px;
  background-color: lightblue;
}

/* This is the default value for all elements.
Elements are positioned according to the normal document flow.
Top, right, bottom, and left properties have no effect. */
.static {
  position: static;
}
/* Elements are positioned relative to their normal position.
Top, right, bottom, and left properties move the element from its normal position, without affecting other elements. */
.relative {
  position: relative;
  top: 10px;
  left: 10px;
}
.absolute-container {
  position: relative;
  width: 300px;
  height: 300px;
  background-color: lightgreen;
}
/* Elements are positioned relative to the nearest positioned ancestor (i.e., an ancestor with a position value other than static).
If no such ancestor exists, it is positioned relative to the initial containing block (usually the viewport).
The element is removed from the normal document flow, so it can overlap other elements. */
.absolute {
  position: absolute;
  top: 20px;
  left: 30px;
}
/* Elements are positioned relative to the viewport, 
meaning they stay in the same place even when the page is scrolled.
Like absolute, the element is removed from the normal document flow. */
.fixed {
  position: fixed;
  top: 0;
  left: 0;
  width: 100px;
  height: 100px;
  background-color: lightcoral;
}
/* Elements are positioned based on the user's scroll position.
The element toggles between relative and fixed positioning, depending on the scroll 
position. It is positioned relative until a given offset position is met in the viewport, 
then it "sticks" in place (like fixed). */

.sticky {
  position: sticky;
  top: 10px;
  background-color: lightyellow;
}

/* grow  shrink basis */
.container {
  display: flex;
  background-color: lightgrey;
}
.item {
  background-color: dodgerblue;
  color: white;
  padding: 20px;
  margin: 10px;
}
.fixed-size {
  flex: 0 0 auto;
}
.flexible {
  flex: 1 1 0;
}
/* styles.css */
/* body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background-color: #f0f0f0;
} */

.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 100px);
  gap: 10px;
  width: 80%;
  max-width: 600px;
  background-color: lightgrey;
  padding: 10px;
}

.grid-item {
  background-color: dodgerblue;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  border-radius: 5px;
}

.item1 {
  grid-column: 1 / 2; /* start/end */
  grid-row: 1 / 2;
}

.item2 {
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}

.item3 {
  grid-column: 3 / 4;
  grid-row: 1 / 2;
}

.item4 {
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}

.item5 {
  grid-column: 2 / 3;
  grid-row: 2 / 3;
}

.item6 {
  grid-column: 3 / 4;
  grid-row: 2 / 3;
}
